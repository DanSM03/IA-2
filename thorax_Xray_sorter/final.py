# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IOl7N9faQSXjaJSBd_V17a-fVU24Nf2m

DATA
"""

!pip install -q kaggle

! mkdir ~/.kaggle

from google.colab import drive
drive.mount('/content/drive')
! cp /content/drive/MyDrive/datasets/COVID-19_Radiography_Dataset/kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d tawsifurrahman/covid19-radiography-database

! mkdir datasets

! unzip covid19-radiography-database.zip -d datasets

# Commented out IPython magic to ensure Python compatibility.
import os
import pandas as pd
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import shutil
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
# %matplotlib inline

Covid_metadata = pd.read_excel('/content/datasets/COVID-19_Radiography_Dataset/COVID.metadata.xlsx')
Pneumonia_metadata= pd.read_excel('/content/datasets/COVID-19_Radiography_Dataset/Viral Pneumonia.metadata.xlsx')
LungOpacity_metadata = pd.read_excel('/content/datasets/COVID-19_Radiography_Dataset/Lung_Opacity.metadata.xlsx')
Normal_metadata = pd.read_excel('/content/datasets/COVID-19_Radiography_Dataset/Normal.metadata.xlsx')

print("Metadata normal ",Normal_metadata.shape)
print("Metadata covid ",Covid_metadata.shape)
print("Metadata pneumonia ",Pneumonia_metadata.shape)
print("Metadata Lung Opacity ",LungOpacity_metadata.shape)

Covid_metadata.head()

"""Etiquetas seg√∫n la clase"""

Normal_metadata['label'] = 0
Covid_metadata['label'] = 1
Pneumonia_metadata['label'] = 2
LungOpacity_metadata['label'] = 3

data_size = 1345

data0 = Normal_metadata.sample(data_size, random_state=7)
data1 = Covid_metadata.sample(data_size, random_state=7)
data2 = Pneumonia_metadata.sample(data_size, random_state=7)
data3 = LungOpacity_metadata.sample(data_size, random_state=7)

fulldata = pd.concat([data0,data1,data2,data3], axis=0).reset_index(drop=True)

fulldata['label'].value_counts()

fulldata = fulldata.drop(['FORMAT','SIZE','URL'], axis=1)

fulldata = shuffle(fulldata)
print("Total datos ", fulldata.shape)
fulldata.head()

data_train, data_test = train_test_split(fulldata, test_size=0.20,
                                         random_state=7, stratify=fulldata['label'])

print("Datos de entrenamiento ", data_train.shape)
print("Datos de prueba ", data_test.shape)

data_train['label'].value_counts()

data_test['label'].value_counts()

data_train.shape

## Carpeta origen
co = 'co'
os.mkdir(co)

## Carpeta para las imagenes de entrenamiento

ctrain = os.path.join(co, 'ctrain')
os.mkdir(ctrain)

## Carpeta para las imagenes de testeo
ctest = os.path.join(co, 'ctest')
os.mkdir(ctest)

## Carpetas para cada clase de imagenes de entrenamiento

normal_train = os.path.join(ctrain, 'normal')
os.mkdir(normal_train)

covid_train = os.path.join(ctrain, 'covid')
os.mkdir(covid_train)

pneumonia_train = os.path.join(ctrain, 'pneumonia')
os.mkdir(pneumonia_train)

lungOpacity_train = os.path.join(ctrain, 'lung opacity')
os.mkdir(lungOpacity_train)

## Carpetas para cada clase de imagenes de testeo

normal_test = os.path.join(ctest, 'normal')
os.mkdir(normal_test)

covid_test = os.path.join(ctest, 'covid')
os.mkdir(covid_test)

pneumonia_test = os.path.join(ctest, 'pneumonia')
os.mkdir(pneumonia_test)

lungOpacity_test = os.path.join(ctest, 'lung opacity')
os.mkdir(lungOpacity_test)

os.listdir('co/ctest')

os.listdir('co/ctrain')

train_list = list(data_train['FILE NAME'])
test_list = list(data_test['FILE NAME'])

for image in train_list:


    filename = image + '.png'

    target = int(fulldata.loc[fulldata['FILE NAME'] == image, ['label']].values)

    if target == 0:
        label = 'normal'

        filename = filename.capitalize()
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/Normal/images', filename)

    if target == 1:
        label = 'covid'
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/COVID/images', filename)

    if target == 2:
        label = 'pneumonia'
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/Viral Pneumonia/images', filename)

    if target == 3:
        label = 'lung opacity'
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/Lung_Opacity/images', filename)

    dst = os.path.join(ctrain, label, filename)

    shutil.copyfile(src, dst)


for image in test_list:


    filename = image + '.png'

    target = int(fulldata.loc[fulldata['FILE NAME'] == image, ['label']].values)

    if target == 0:
        label = 'normal'

        filename = filename.capitalize()
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/Normal/images', filename)

    if target == 1:
        label = 'covid'
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/COVID/images', filename)

    if target == 2:
        label = 'pneumonia'
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/Viral Pneumonia/images', filename)

    if target == 3:
        label = 'lung opacity'
        src = os.path.join('/content/datasets/COVID-19_Radiography_Dataset/Lung_Opacity/images', filename)

    dst = os.path.join(ctest, label, filename)

    shutil.copyfile(src, dst)

print("total de imagenes clase normal ",len(os.listdir('co/ctrain/normal')))
print("total de imagenes clase covid ",len(os.listdir('co/ctrain/covid')))
print("total de imagenes clase pneumonia ",len(os.listdir('co/ctrain/pneumonia')))
print("total de imagenes clase lung opacity ",len(os.listdir('co/ctrain/lung opacity')))

print("total de imagenes clase normal ",len(os.listdir('co/ctest/normal')))
print("total de imagenes clase covid ",len(os.listdir('co/ctest/covid')))
print("total de imagenes clase pneumonia ",len(os.listdir('co/ctest/pneumonia')))
print("total de imagenes clase lung opacity ",len(os.listdir('co/ctest/lung opacity')))

BATCH_SIZE = 32
IMG_SIZE = (256  , 256)
train_directory = "co/ctrain"
test_directory = "co/ctest"

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255,
        rotation_range=0.2,
        shear_range=0.2,
        horizontal_flip=True)

test_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        train_directory,
        target_size=IMG_SIZE,
        color_mode='grayscale',
        batch_size=32,
        class_mode='categorical')

test_generator = test_datagen.flow_from_directory(
        test_directory,
        target_size=IMG_SIZE,
        color_mode='grayscale',
        batch_size=32,
        shuffle=False,
        class_mode='categorical')

train_generator.class_indices

test_generator.class_indices

train_generator.image_shape

plt.figure(figsize=(12, 12))
for i in range(9):
    plt.subplot(3,3, i+1)
    img, label = train_generator.next()
    img=img[0,:,:,0]
    plt.imshow(img, cmap='gray')
    dic = { 0:'covid', 1:'lung opacity', 2:'normal', 3:'pneumonia'}
    plt.title(dic.get(np.where(label[0]==1)[0][0]))
    plt.axis('off')
plt.show()

def clasificador(IMG_SIZE):
    input_shape = IMG_SIZE + (1, )
    model = tf.keras.Sequential([
        tf.keras.layers.Conv2D(32, (3, 3), activation="relu", padding='same',input_shape=input_shape),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(32, (3, 3), padding='same', activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(64, (3, 3), padding='same',activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(64, (3, 3), padding='same',activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(128, (3, 3), padding='same',activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(128, (3, 3), padding='same',activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(128, (3, 3), padding='same',activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(256, (3, 3), padding='same',activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),
        tf.keras.layers.Flatten(),

        tf.keras.layers.Dense(units=128, activation='relu'),
        tf.keras.layers.Dense(units=64, activation='relu'),
        tf.keras.layers.Dense(units=4, activation='softmax')
    ])
    return model

IMG_SIZE

model2 = clasificador(IMG_SIZE)

model2.summary()

base_learning_rate = 0.001
model2.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),
              loss=tf.keras.losses.CategoricalCrossentropy(),
              metrics=['accuracy'])

early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

initial_epochs = 15
history = model2.fit(train_generator, epochs=initial_epochs,
                     validation_data = test_generator, callbacks=[early_stopping])

model2.save('RXmodel2.h5')

loaded_model = tf.keras.models.load_model('/content/RXmodel1.h5')

new_predictions = loaded_model.predict(test_generator)

loaded_model.evaluate(test_generator)

model2.evaluate(test_generator)

def plot_loss_acc(new_predictions):
    train_loss = history.history['loss']
    val_loss = history.history['val_loss']
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    epochs = range(len(train_loss))

    plt.figure(figsize=(8,6))
    plt.plot(epochs, train_loss, color='b', label='Train')
    plt.plot(epochs, val_loss, color='r', label='Validation')
    plt.legend()
    plt.title('Model Loss')


    plt.figure(figsize=(8,6))
    plt.plot(epochs, acc, color='b', label='Train')
    plt.plot(epochs, val_acc, color='r', label='Validation')
    plt.legend()
    plt.title('Model Accuracy')

    plt.show()

plot_loss_acc(history)

from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns

val_predict = model2.predict(test_generator)

predict_class = np.argmax(val_predict, axis=1)
predict_class = predict_class.tolist()

## 'covid': 0, 'lung opacity': 1, 'normal': 2, 'pneumonia': 3
labels = ['Covid', 'Lung opacity', 'normal', 'pneumonia']
report = classification_report(test_generator.classes, predict_class, target_names=labels)
print(report)

cm = confusion_matrix(test_generator.classes, predict_class)
cm_df = pd.DataFrame(cm,
                     index = ['COVID','LUNG OPACITY','NORMAL','PNEUMONIA'],
                     columns = ['COVID','LUNG OPACITY','NORMAL','PNEUMONIA'])

plt.figure(figsize=(8,6))
sns.heatmap(cm_df, annot=True, fmt='d')
plt.title("Confusion Matrixx")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

